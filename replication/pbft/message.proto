syntax = "proto3";
package dsnet.pbft.proto;

import "common/request.proto";

message PBFTMessage {
    oneof sub {
        dsnet.Request request = 1;
        Preprepare preprepare = 2;
        Prepare prepare = 3;
        Commit commit = 4;
    }
}

message Reply {
    bytes result = 1;
    uint64 request_number = 2;
    int32 replica_id = 3;
    uint32 view_number = 4;
}

// in PBFT paper, only view, op and digest are protected by primary's signature
// to keep a unified form that all PBFTMessage are transmitted with a 
// signed-warpper, Preprepare's signature unnecessarily cover client's request
// in this implementation. the overhead should be small
message Preprepare {
    uint32 view_number = 1;
    uint64 op_number = 2;
    bytes digest = 3;
    bytes signed_message = 4;  // Signed[PBFTMessage::dsnet.Request]
}

message Prepare {
    uint32 view_number = 1;
    uint64 op_number = 2;
    bytes digest = 3;
    int32 replica_id = 4;
}

message Commit {
    uint32 view_number = 1;
    uint64 op_number = 2;
    bytes digest = 3;
    int32 replica_id = 4;
}
